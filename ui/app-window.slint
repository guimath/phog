import { Button, VerticalBox, HorizontalBox, TextEdit} from "std-widgets.slint";


// ***************************************************************** //
//                            External Elements
// ***************************************************************** //
export enum Message{
  EditSuccessful, 
  EditNoRAW, 
  EditFailed, 
  EditAlreadyDone,
  BinSuccessful, 
  BinNoRAW, 
  BinFailed, 
  BinAlreadyDone,
}
enum Action{Edit, Bin}

// ***************************************************************** //
//                            Default Widgets
// ***************************************************************** //
component MainText inherits Text {
  // font-family: 
  font-size: 25pt;
  // color: white;
}

// MenuBar { // Menubar not yet fully stable (causes rest of window weird layout)
//     Menu {
//         title: @tr("Names");
//         MenuItem {
//             title: @tr("Change edit folder");
//             activated => { prep_edit_input(); }
//         }
//         MenuItem {
//             title: @tr("Change bin folder");
//             activated => { prep_bin_input(); }
//         }
//     }
// }



export component AppWindow inherits Window {
  title: "Phog";
  // ***************************************************************** //
  //                            PROPERTIES
  // ***************************************************************** //
  in property <int> photo_num: 0;
  in property <int> total_num: 0;
  in property <string> photo_name: "";
  in property <image> photo_path;
  
  out property <string> text_input: "";
  property <bool> show_text_input: false;
  /// Purpose of the user text input
  property <Action> input_mode: Bin;

  
  property <bool> show_help:false;
  
  // Constants
  property <color> pop_up_background_on: root.background.brighter(0.1); // theme agnostic
  property <color> pop_up_background_off: pop_up_background_on.transparentize(1);

  // ***************************************************************** //
  //                            CALLBACKS
  // ***************************************************************** //
  callback prep_edit_input();
  callback set_edit_input();
  callback prep_bin_input();
  callback set_bin_input();
  callback prev(bool);
  callback next(bool);
  callback edit();
  callback delete();
  callback close();

  // ***************************************************************** //
  //                            UI LOGIC
  // ***************************************************************** //
  /// Shows the text input with the provided text as default
  public function display_text_input(text:string) {
    text_input.text = text;
    root.show_text_input = true;
    text_input.focus();
    text_input.select-all();
    text_input.clear-selection();// Hack to put cursor at the end
  }
  /// Shows a pop up message
  public function display_message(message:Message) {
    // TODO find a way to force timer open
    if message == Message.EditSuccessful       { pop_up_text.text = @tr("Copied to edit successfully");}
    else if message == Message.EditNoRAW       { pop_up_text.text = @tr("copied JPG to edit, no Raw found ");}
    else if message == Message.EditFailed      { pop_up_text.text = @tr("Copy to edit failed");}
    else if message == Message.EditAlreadyDone { pop_up_text.text = @tr("Already copied");}
    else if message == Message.BinSuccessful   { pop_up_text.text = @tr("Moved to bin successfully");}
    else if message == Message.BinNoRAW        { pop_up_text.text = @tr("Moved JPG to bin, no Raw found ");}
    else if message == Message.BinFailed       { pop_up_text.text = @tr("Move to bin failed");}
    else if message == Message.BinAlreadyDone  { pop_up_text.text = @tr("Already deleted");}
    pop_up_text.color = example_text.color;
    pop_up.background = root.pop_up_background_on;
    pop_up.y = 100px;
    timer.running = true;
  }
    /// A Timer to handle the end of a pop up message
  timer:= Timer {
    interval: 2s;
    running: false;
    triggered() => {
      self.running = false;
      pop_up.background = root.pop_up_background_off;
      pop_up_text.color = example_text.color.transparentize(1);
      pop_up.y = 0pt;
    }
  }
    
  /// global focus for all hotkeys
  forward-focus: my-key-handler;
  my-key-handler := FocusScope {
    key-pressed(event) => {
      if event.text == "h" {
        root.show_help = !root.show_help;
      }
      if event.text == Key.LeftArrow {
        root.prev(event.repeat);
      }
      else if event.text == Key.RightArrow {
        root.next(event.repeat);
      }
      else if event.text == "d" && event.modifiers.alt {
        root.input_mode = Action.Bin;
        text_input_title.text = @tr("Bin folder:");
        root.prep_bin_input();
      }
      else if event.text == "d" && !event.repeat {
        root.delete();
      }
      else if event.text == "e"  && event.modifiers.alt {
        root.input_mode = Action.Edit;
        text_input_title.text = @tr("Edit folder:");
        root.prep_edit_input();
      }
      else if event.text == "e" && !event.repeat {
        root.edit();
      }
      else if event.text == Key.Escape && !event.repeat {
        root.close();
      }
      accept
    }
  }


  // ***************************************************************** //
  //                            WIDGETS
  // ***************************************************************** //
  // main box, always shown
  VerticalBox {
    height: 100%;
    padding: 0;
    padding-bottom: 10px;
    Image {
      source: root.photo_path;
      visible: true;
      // rotation-angle:root.photo_rotation*1deg ;  // doesn't rescale so meh
    }
    example_text:=MainText {
      text: "\{root.photo_name} (\{root.photo_num}/\{root.total_num})";
      height: 25pt;
    }
  }


  // Help 
  HorizontalBox {
    alignment: center;
    height: 50%;
    width: 60%;
    Rectangle {
      // height: 10%;
      width: 100%;
      // padding: 100pt;
      // -left: 100pt;
      visible: root.show_help;
      background: root.pop_up_background_on;
      border-radius: 20px;
      VerticalBox {
        MainText {
          horizontal-alignment: center;
          text: @tr("Help & Hot Keys");
        }
        MainText {
          horizontal-alignment: center;
          wrap: word-wrap;
          font-size: 20pt;
          text: @tr("This app is designed for photographers looking to sort photos and RAWs.\nYou can select photo for edits & delete them directly from the app with reduced loading time.");
        }
        HorizontalBox {
          MainText {
            horizontal-alignment: right;
            font-size: 20pt;
            color: example_text.color.transparentize(0.4);
            text: @tr("h:\nArrows:\ne:\nd:\nAlt+e:\nAlt+d:\nEsc:");
          }
          MainText {
            horizontal-alignment: left;
            font-size: 20pt;
            text: @tr("Toggle help\nPrevious/next image\nCopy to edit\nMove to bin\nChange edit folder\nChange bin folder\nQuit");
          }
        }

      }
    }
  }

  // pop-up 
  pop_up := Rectangle {
    y: 0px;
    width: 400pt;
    height: 60pt;
    background: root.pop_up_background_off;
    border-radius: 20px;
    visible: true;
    animate y {
      duration: 500ms;
      easing: ease-in-out;
    }
    animate background {
      duration: 250ms;
      easing: ease-in-out;
    }
    pop_up_text := MainText {
      color: example_text.color.transparentize(1);
      animate color {
        duration: 250ms;
        easing: ease-in-out;
      }
    }
  }

  Rectangle {
    // visualize focus
    // TODO once focus lost callback is added make disappear
    visible: root.show_text_input;
    background: #0000005b;
    HorizontalLayout {
      alignment: center;
      VerticalLayout {
        alignment: center;
        Rectangle {
          width: 400pt;
          height: 90pt;
          border-radius: 20px;
          visible: root.show_text_input;
          background: #000000bf;
          VerticalLayout {
            alignment: center;
            spacing: 10pt;
            text_input_title:= MainText {
              color:white.darker(0.8);
              horizontal-alignment: center;
              text: "";
            }
            text_input:= TextInput {
              horizontal-alignment: center;
              font-size: 25pt;
              color:white;
              accepted => {
                root.show_text_input = false;
                root.focus();
                root.text_input = self.text;
                if root.input_mode == Action.Edit {
                  root.set_edit_input();
                }
                else if root.input_mode == Action.Bin {
                  root.set_bin_input();
                }
              }

              key-pressed(event) => {
                if (event.text == Key.Escape) {
                  root.show_text_input = false;
                  root.focus();
                }
                reject
              }
            } 
          }
        }
      }
    }
  }
}
